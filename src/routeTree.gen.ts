/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthedRouteImport } from './routes/_authed'
import { Route as AuthedPlaygroundIndexRouteImport } from './routes/_authed/_playground/index'
import { Route as AuthedPlaygroundStarredRouteRouteImport } from './routes/_authed/_playground/starred/route'
import { Route as AuthedPlaygroundHistoryRouteRouteImport } from './routes/_authed/_playground/history/route'
import { Route as AuthedPlaygroundHistoryDetailRouteRouteImport } from './routes/_authed/_playground/history/detail/route'

const AuthedRoute = AuthedRouteImport.update({
  id: '/_authed',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedPlaygroundIndexRoute = AuthedPlaygroundIndexRouteImport.update({
  id: '/_playground/',
  path: '/',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedPlaygroundStarredRouteRoute =
  AuthedPlaygroundStarredRouteRouteImport.update({
    id: '/_playground/starred',
    path: '/starred',
    getParentRoute: () => AuthedRoute,
  } as any)
const AuthedPlaygroundHistoryRouteRoute =
  AuthedPlaygroundHistoryRouteRouteImport.update({
    id: '/_playground/history',
    path: '/history',
    getParentRoute: () => AuthedRoute,
  } as any)
const AuthedPlaygroundHistoryDetailRouteRoute =
  AuthedPlaygroundHistoryDetailRouteRouteImport.update({
    id: '/detail',
    path: '/detail',
    getParentRoute: () => AuthedPlaygroundHistoryRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/history': typeof AuthedPlaygroundHistoryRouteRouteWithChildren
  '/starred': typeof AuthedPlaygroundStarredRouteRoute
  '/': typeof AuthedPlaygroundIndexRoute
  '/history/detail': typeof AuthedPlaygroundHistoryDetailRouteRoute
}
export interface FileRoutesByTo {
  '/history': typeof AuthedPlaygroundHistoryRouteRouteWithChildren
  '/starred': typeof AuthedPlaygroundStarredRouteRoute
  '/': typeof AuthedPlaygroundIndexRoute
  '/history/detail': typeof AuthedPlaygroundHistoryDetailRouteRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authed': typeof AuthedRouteWithChildren
  '/_authed/_playground/history': typeof AuthedPlaygroundHistoryRouteRouteWithChildren
  '/_authed/_playground/starred': typeof AuthedPlaygroundStarredRouteRoute
  '/_authed/_playground/': typeof AuthedPlaygroundIndexRoute
  '/_authed/_playground/history/detail': typeof AuthedPlaygroundHistoryDetailRouteRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/history' | '/starred' | '/' | '/history/detail'
  fileRoutesByTo: FileRoutesByTo
  to: '/history' | '/starred' | '/' | '/history/detail'
  id:
    | '__root__'
    | '/_authed'
    | '/_authed/_playground/history'
    | '/_authed/_playground/starred'
    | '/_authed/_playground/'
    | '/_authed/_playground/history/detail'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthedRoute: typeof AuthedRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed/_playground/': {
      id: '/_authed/_playground/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthedPlaygroundIndexRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/_playground/starred': {
      id: '/_authed/_playground/starred'
      path: '/starred'
      fullPath: '/starred'
      preLoaderRoute: typeof AuthedPlaygroundStarredRouteRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/_playground/history': {
      id: '/_authed/_playground/history'
      path: '/history'
      fullPath: '/history'
      preLoaderRoute: typeof AuthedPlaygroundHistoryRouteRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/_playground/history/detail': {
      id: '/_authed/_playground/history/detail'
      path: '/detail'
      fullPath: '/history/detail'
      preLoaderRoute: typeof AuthedPlaygroundHistoryDetailRouteRouteImport
      parentRoute: typeof AuthedPlaygroundHistoryRouteRoute
    }
  }
}

interface AuthedPlaygroundHistoryRouteRouteChildren {
  AuthedPlaygroundHistoryDetailRouteRoute: typeof AuthedPlaygroundHistoryDetailRouteRoute
}

const AuthedPlaygroundHistoryRouteRouteChildren: AuthedPlaygroundHistoryRouteRouteChildren =
  {
    AuthedPlaygroundHistoryDetailRouteRoute:
      AuthedPlaygroundHistoryDetailRouteRoute,
  }

const AuthedPlaygroundHistoryRouteRouteWithChildren =
  AuthedPlaygroundHistoryRouteRoute._addFileChildren(
    AuthedPlaygroundHistoryRouteRouteChildren,
  )

interface AuthedRouteChildren {
  AuthedPlaygroundHistoryRouteRoute: typeof AuthedPlaygroundHistoryRouteRouteWithChildren
  AuthedPlaygroundStarredRouteRoute: typeof AuthedPlaygroundStarredRouteRoute
  AuthedPlaygroundIndexRoute: typeof AuthedPlaygroundIndexRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedPlaygroundHistoryRouteRoute:
    AuthedPlaygroundHistoryRouteRouteWithChildren,
  AuthedPlaygroundStarredRouteRoute: AuthedPlaygroundStarredRouteRoute,
  AuthedPlaygroundIndexRoute: AuthedPlaygroundIndexRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthedRoute: AuthedRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
