/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthedImport } from './routes/_authed'
import { Route as AuthedPlaygroundIndexImport } from './routes/_authed/_playground/index'
import { Route as AuthedPlaygroundStarredRouteImport } from './routes/_authed/_playground/starred/route'
import { Route as AuthedPlaygroundHistoryRouteImport } from './routes/_authed/_playground/history/route'

// Create/Update Routes

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const AuthedPlaygroundIndexRoute = AuthedPlaygroundIndexImport.update({
  id: '/_playground/',
  path: '/',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedPlaygroundStarredRouteRoute =
  AuthedPlaygroundStarredRouteImport.update({
    id: '/_playground/starred',
    path: '/starred',
    getParentRoute: () => AuthedRoute,
  } as any)

const AuthedPlaygroundHistoryRouteRoute =
  AuthedPlaygroundHistoryRouteImport.update({
    id: '/_playground/history',
    path: '/history',
    getParentRoute: () => AuthedRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/_authed/_playground/history': {
      id: '/_authed/_playground/history'
      path: '/history'
      fullPath: '/history'
      preLoaderRoute: typeof AuthedPlaygroundHistoryRouteImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/_playground/starred': {
      id: '/_authed/_playground/starred'
      path: '/starred'
      fullPath: '/starred'
      preLoaderRoute: typeof AuthedPlaygroundStarredRouteImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/_playground/': {
      id: '/_authed/_playground/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthedPlaygroundIndexImport
      parentRoute: typeof AuthedImport
    }
  }
}

// Create and export the route tree

interface AuthedRouteChildren {
  AuthedPlaygroundHistoryRouteRoute: typeof AuthedPlaygroundHistoryRouteRoute
  AuthedPlaygroundStarredRouteRoute: typeof AuthedPlaygroundStarredRouteRoute
  AuthedPlaygroundIndexRoute: typeof AuthedPlaygroundIndexRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedPlaygroundHistoryRouteRoute: AuthedPlaygroundHistoryRouteRoute,
  AuthedPlaygroundStarredRouteRoute: AuthedPlaygroundStarredRouteRoute,
  AuthedPlaygroundIndexRoute: AuthedPlaygroundIndexRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AuthedRouteWithChildren
  '/history': typeof AuthedPlaygroundHistoryRouteRoute
  '/starred': typeof AuthedPlaygroundStarredRouteRoute
  '/': typeof AuthedPlaygroundIndexRoute
}

export interface FileRoutesByTo {
  '/history': typeof AuthedPlaygroundHistoryRouteRoute
  '/starred': typeof AuthedPlaygroundStarredRouteRoute
  '/': typeof AuthedPlaygroundIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/_authed/_playground/history': typeof AuthedPlaygroundHistoryRouteRoute
  '/_authed/_playground/starred': typeof AuthedPlaygroundStarredRouteRoute
  '/_authed/_playground/': typeof AuthedPlaygroundIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/history' | '/starred' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/history' | '/starred' | '/'
  id:
    | '__root__'
    | '/_authed'
    | '/_authed/_playground/history'
    | '/_authed/_playground/starred'
    | '/_authed/_playground/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthedRoute: typeof AuthedRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AuthedRoute: AuthedRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authed"
      ]
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/_playground/history",
        "/_authed/_playground/starred",
        "/_authed/_playground/"
      ]
    },
    "/_authed/_playground/history": {
      "filePath": "_authed/_playground/history/route.tsx",
      "parent": "/_authed"
    },
    "/_authed/_playground/starred": {
      "filePath": "_authed/_playground/starred/route.tsx",
      "parent": "/_authed"
    },
    "/_authed/_playground/": {
      "filePath": "_authed/_playground/index.tsx",
      "parent": "/_authed"
    }
  }
}
ROUTE_MANIFEST_END */
